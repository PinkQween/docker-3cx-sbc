name: Build 3CX SBC Docker image

on:
  push:
    branches:
      - "main"
  schedule:
    - cron: "0 * * * *"

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  check:
    runs-on: ubuntu-latest
    container:
      image: debian:buster
    outputs:
      isNew: ${{ steps.check-new-version.outputs.isNew }}
      version: ${{ steps.fetch-latest-version.outputs.version }}
    steps:
      - name: Fetch latest version
        id: fetch-latest-version
        run: |
          apt update
          apt install -y wget gnupg2
          wget -t 1 -T 10 -qO - "https://downloads-global.3cx.com/downloads/3cxpbx/public.key" | apt-key add -
          echo "deb https://downloads-global.3cx.com/downloads/debian buster main" > /etc/apt/sources.list.d/3cxpbx.list
          apt update

          VERSION=$(apt-cache show 3cxsbc | grep Version | head -n 1 | sed 's/Version: //g')
          [ -z $VERSION ] && { echo "Could not find a package version"; exit 1; }
          echo "::set-output name=version::$VERSION"

      - name: Check if new version
        id: check-new-version
        run: |
          IS_NEW=$(docker image inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.fetch-latest-version.outputs.version }} >/dev/null 2>&1 && echo false || echo true)
          echo "::set-output name=isNew::$IS_NEW"

  build:
    needs: check
    if: github.event_name	== 'push' || needs.check.outputs.isNew == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Docker
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get image tags
        id: get-tags
        env:
          IMAGE: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        run: |
          IFS='.' read -r -a array <<< ${{ needs.check.outputs.version }}
          TAGS=$(cat << EOF
          ${{ env.IMAGE }}:latest
          ${{ env.IMAGE }}:${array[0]}
          ${{ env.IMAGE }}:${array[0]}.${array[1]}
          ${{ env.IMAGE }}:${array[0]}.${array[1]}.${array[2]}
          EOF
          )
          TAGS="${TAGS//'%'/'%25'}"
          TAGS="${TAGS//$'\n'/'%0A'}"
          TAGS="${TAGS//$'\r'/'%0D'}"
          echo "::set-output name=tags::$TAGS"

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          platforms: linux/amd64,linux/armhf
          push: true
          tags: ${{ steps.get-tags.outputs.tags }}
          build-args: |
            SBC_VERSION=${{ needs.check.outputs.version }}
